// Code generated by mockery v2.35.4. DO NOT EDIT.

package git

import (
	git "github.com/KaribuLab/kli/git"
	mock "github.com/stretchr/testify/mock"
)

// MockCmd is an autogenerated mock type for the Cmd type
type MockCmd struct {
	mock.Mock
}

type MockCmd_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCmd) EXPECT() *MockCmd_Expecter {
	return &MockCmd_Expecter{mock: &_m.Mock}
}

// Clone provides a mock function with given fields: repository, branch, workdir
func (_m *MockCmd) Clone(repository string, branch string, workdir string) error {
	ret := _m.Called(repository, branch, workdir)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(repository, branch, workdir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCmd_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type MockCmd_Clone_Call struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
//   - repository string
//   - branch string
//   - workdir string
func (_e *MockCmd_Expecter) Clone(repository interface{}, branch interface{}, workdir interface{}) *MockCmd_Clone_Call {
	return &MockCmd_Clone_Call{Call: _e.mock.On("Clone", repository, branch, workdir)}
}

func (_c *MockCmd_Clone_Call) Run(run func(repository string, branch string, workdir string)) *MockCmd_Clone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCmd_Clone_Call) Return(_a0 error) *MockCmd_Clone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmd_Clone_Call) RunAndReturn(run func(string, string, string) error) *MockCmd_Clone_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentBranch provides a mock function with given fields: verbose
func (_m *MockCmd) CurrentBranch(verbose bool) (string, error) {
	ret := _m.Called(verbose)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) (string, error)); ok {
		return rf(verbose)
	}
	if rf, ok := ret.Get(0).(func(bool) string); ok {
		r0 = rf(verbose)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(verbose)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCmd_CurrentBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentBranch'
type MockCmd_CurrentBranch_Call struct {
	*mock.Call
}

// CurrentBranch is a helper method to define mock.On call
//   - verbose bool
func (_e *MockCmd_Expecter) CurrentBranch(verbose interface{}) *MockCmd_CurrentBranch_Call {
	return &MockCmd_CurrentBranch_Call{Call: _e.mock.On("CurrentBranch", verbose)}
}

func (_c *MockCmd_CurrentBranch_Call) Run(run func(verbose bool)) *MockCmd_CurrentBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockCmd_CurrentBranch_Call) Return(_a0 string, _a1 error) *MockCmd_CurrentBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCmd_CurrentBranch_Call) RunAndReturn(run func(bool) (string, error)) *MockCmd_CurrentBranch_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function with given fields: verbose
func (_m *MockCmd) GetLogs(verbose bool) ([]git.GitLog, error) {
	ret := _m.Called(verbose)

	var r0 []git.GitLog
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) ([]git.GitLog, error)); ok {
		return rf(verbose)
	}
	if rf, ok := ret.Get(0).(func(bool) []git.GitLog); ok {
		r0 = rf(verbose)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]git.GitLog)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(verbose)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCmd_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type MockCmd_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - verbose bool
func (_e *MockCmd_Expecter) GetLogs(verbose interface{}) *MockCmd_GetLogs_Call {
	return &MockCmd_GetLogs_Call{Call: _e.mock.On("GetLogs", verbose)}
}

func (_c *MockCmd_GetLogs_Call) Run(run func(verbose bool)) *MockCmd_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockCmd_GetLogs_Call) Return(_a0 []git.GitLog, _a1 error) *MockCmd_GetLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCmd_GetLogs_Call) RunAndReturn(run func(bool) ([]git.GitLog, error)) *MockCmd_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTags provides a mock function with given fields: verbose
func (_m *MockCmd) GetTags(verbose bool) ([]git.GitTag, error) {
	ret := _m.Called(verbose)

	var r0 []git.GitTag
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) ([]git.GitTag, error)); ok {
		return rf(verbose)
	}
	if rf, ok := ret.Get(0).(func(bool) []git.GitTag); ok {
		r0 = rf(verbose)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]git.GitTag)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(verbose)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCmd_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type MockCmd_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - verbose bool
func (_e *MockCmd_Expecter) GetTags(verbose interface{}) *MockCmd_GetTags_Call {
	return &MockCmd_GetTags_Call{Call: _e.mock.On("GetTags", verbose)}
}

func (_c *MockCmd_GetTags_Call) Run(run func(verbose bool)) *MockCmd_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockCmd_GetTags_Call) Return(_a0 []git.GitTag, _a1 error) *MockCmd_GetTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCmd_GetTags_Call) RunAndReturn(run func(bool) ([]git.GitTag, error)) *MockCmd_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// PushTags provides a mock function with given fields: verbose, tag
func (_m *MockCmd) PushTags(verbose bool, tag string) error {
	ret := _m.Called(verbose, tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, string) error); ok {
		r0 = rf(verbose, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCmd_PushTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushTags'
type MockCmd_PushTags_Call struct {
	*mock.Call
}

// PushTags is a helper method to define mock.On call
//   - verbose bool
//   - tag string
func (_e *MockCmd_Expecter) PushTags(verbose interface{}, tag interface{}) *MockCmd_PushTags_Call {
	return &MockCmd_PushTags_Call{Call: _e.mock.On("PushTags", verbose, tag)}
}

func (_c *MockCmd_PushTags_Call) Run(run func(verbose bool, tag string)) *MockCmd_PushTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(string))
	})
	return _c
}

func (_c *MockCmd_PushTags_Call) Return(_a0 error) *MockCmd_PushTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmd_PushTags_Call) RunAndReturn(run func(bool, string) error) *MockCmd_PushTags_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTag provides a mock function with given fields: verbose, tag
func (_m *MockCmd) RemoveTag(verbose bool, tag string) error {
	ret := _m.Called(verbose, tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, string) error); ok {
		r0 = rf(verbose, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCmd_RemoveTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTag'
type MockCmd_RemoveTag_Call struct {
	*mock.Call
}

// RemoveTag is a helper method to define mock.On call
//   - verbose bool
//   - tag string
func (_e *MockCmd_Expecter) RemoveTag(verbose interface{}, tag interface{}) *MockCmd_RemoveTag_Call {
	return &MockCmd_RemoveTag_Call{Call: _e.mock.On("RemoveTag", verbose, tag)}
}

func (_c *MockCmd_RemoveTag_Call) Run(run func(verbose bool, tag string)) *MockCmd_RemoveTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(string))
	})
	return _c
}

func (_c *MockCmd_RemoveTag_Call) Return(_a0 error) *MockCmd_RemoveTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmd_RemoveTag_Call) RunAndReturn(run func(bool, string) error) *MockCmd_RemoveTag_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: verbose, args
func (_m *MockCmd) Run(verbose bool, args ...string) (string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, verbose)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(bool, ...string) (string, error)); ok {
		return rf(verbose, args...)
	}
	if rf, ok := ret.Get(0).(func(bool, ...string) string); ok {
		r0 = rf(verbose, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(bool, ...string) error); ok {
		r1 = rf(verbose, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCmd_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockCmd_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - verbose bool
//   - args ...string
func (_e *MockCmd_Expecter) Run(verbose interface{}, args ...interface{}) *MockCmd_Run_Call {
	return &MockCmd_Run_Call{Call: _e.mock.On("Run",
		append([]interface{}{verbose}, args...)...)}
}

func (_c *MockCmd_Run_Call) Run(run func(verbose bool, args ...string)) *MockCmd_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(bool), variadicArgs...)
	})
	return _c
}

func (_c *MockCmd_Run_Call) Return(_a0 string, _a1 error) *MockCmd_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCmd_Run_Call) RunAndReturn(run func(bool, ...string) (string, error)) *MockCmd_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Tag provides a mock function with given fields: verbose, tag, commit
func (_m *MockCmd) Tag(verbose bool, tag string, commit string) error {
	ret := _m.Called(verbose, tag, commit)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, string, string) error); ok {
		r0 = rf(verbose, tag, commit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCmd_Tag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tag'
type MockCmd_Tag_Call struct {
	*mock.Call
}

// Tag is a helper method to define mock.On call
//   - verbose bool
//   - tag string
//   - commit string
func (_e *MockCmd_Expecter) Tag(verbose interface{}, tag interface{}, commit interface{}) *MockCmd_Tag_Call {
	return &MockCmd_Tag_Call{Call: _e.mock.On("Tag", verbose, tag, commit)}
}

func (_c *MockCmd_Tag_Call) Run(run func(verbose bool, tag string, commit string)) *MockCmd_Tag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCmd_Tag_Call) Return(_a0 error) *MockCmd_Tag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCmd_Tag_Call) RunAndReturn(run func(bool, string, string) error) *MockCmd_Tag_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCmd creates a new instance of MockCmd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCmd(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCmd {
	mock := &MockCmd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
